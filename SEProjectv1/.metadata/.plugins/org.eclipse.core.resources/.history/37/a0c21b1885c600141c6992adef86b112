import java.util.*;
public interface InitializeGame{
	
	public static void initialize(Game game){
		initializePlayerPriority(game);
		initializePlayerRaces(game);
		initializeResources(game);
		initializeBuildingPool(game);
		initializeProductionPool(game);
		initializePlayerDecks(game);
		initializePlayerTerrain(game);
		choosePlayerResources(game);
	}
	
	public static void initializePlayerPriority(Game game){
				
		game.player1.next = game.player2;
		game.player2.next = game.player3;
		game.player3.next = game.player1;
		game.activePlayer = game.player1;
		
		int turnOrder = (int)(Math.random()*3);
		for(int i = turnOrder; i > 0; i--){
			game.activePlayer = game.activePlayer.next.next;
		}
	}
	
	public static void initializePlayerRaces(Game game){
		ArrayList<Player.Race> playerRace = new ArrayList<Player.Race>();
		playerRace.add(Player.Race.NORSE);
		playerRace.add(Player.Race.EGYPTIAN);
		playerRace.add(Player.Race.GREEK);
		int numberOfPlayers = 3;
		for(int i = 0; i < numberOfPlayers; i++){
			RandomSelection<Player.Race> selector = new RandomSelection<Player.Race>(playerRace);
			game.activePlayer.playerRace = selector.getRandomFromList();
			game.activePlayer = game.activePlayer.next;
		}
	}
	
	public static void initializeResources(Game game){
		for(int i = 0; i < 4; i++ ){
			game.bank[i] = 25;
			game.player1.wallet[i] = 4;
			game.player2.wallet[i] = 4;
			game.player3.wallet[i] = 4;
		}
		int turnOrder = (int)(Math.random()*3);
		for(int i = turnOrder; i > 0; i--){
			game.activePlayer = game.activePlayer.next.next;
		}
	}
		
	public static void initializeBuildingPool(Game game){
		for(int i = 0; i < 3; i++){
			game.activePlayer.buildingPool.add(new Building(Building.Type.MARKET, 0,0,3,2));
			game.activePlayer.buildingPool.add(new Building(Building.Type.STOREHOUSE, 2,2,2,2));
			game.activePlayer.buildingPool.add(new Building(Building.Type.QUARRY, 4,0,1,0));
			game.activePlayer.buildingPool.add(new Building(Building.Type.MONUMENT, 3,0,2,0));
			game.activePlayer.buildingPool.add(new Building(Building.Type.GRANARY, 0,2,3,0));
			game.activePlayer.buildingPool.add(new Building(Building.Type.WOOD_WORKSHOP, 2,0,3,0));
			game.activePlayer.buildingPool.add(new Building(Building.Type.GOLD_MINT, 3,2,0,0));
			game.activePlayer.buildingPool.add(new Building(Building.Type.GREAT_TEMPLE, 4,4,4,4));
			game.activePlayer.buildingPool.add(new Building(Building.Type.THE_WONDER, 10,10,10,10));
			
			for(int j = 0; j < 10; j++){
				game.activePlayer.buildingPool.add(new Building(Building.Type.HOUSE, 2,2,0,0));
			}
			game.activePlayer = game.activePlayer.next;
		}
	}
	
	public static void initializeProductionPool(Game game){

		ArrayList<ProductionTile> tempList = new ArrayList<ProductionTile>();

		tempList.add(new ProductionTile(ProductionTile.Terrain.HILLS, 1, 0, 0, 0, 4));
		tempList.add(new ProductionTile(ProductionTile.Terrain.HILLS, 0, 0, 0, 1, 4));
		tempList.add(new ProductionTile(ProductionTile.Terrain.HILLS, 0, 1, 0, 0, 4));
		tempList.add(new ProductionTile(ProductionTile.Terrain.HILLS, 0, 0, 2, 0, 4));

		tempList.add(new ProductionTile(ProductionTile.Terrain.MOUNTAINS, 0, 1,	0, 0, 3));
		tempList.add(new ProductionTile(ProductionTile.Terrain.MOUNTAINS, 0, 0,	0, 1, 3));
		tempList.add(new ProductionTile(ProductionTile.Terrain.MOUNTAINS, 0, 0,	2, 0, 6));

		tempList.add(new ProductionTile(ProductionTile.Terrain.FOREST, 1, 0, 0,	0, 2));
		tempList.add(new ProductionTile(ProductionTile.Terrain.FOREST, 0, 2, 0,	0, 9));
		tempList.add(new ProductionTile(ProductionTile.Terrain.FOREST, 0, 0, 1,	0, 2));
		tempList.add(new ProductionTile(ProductionTile.Terrain.FOREST, 0, 0, 0,	1, 2));

		tempList.add(new ProductionTile(ProductionTile.Terrain.DESERT, 0, 0, 1,	0, 7));
		tempList.add(new ProductionTile(ProductionTile.Terrain.DESERT, 0, 0, 0,	2, 7));
		tempList.add(new ProductionTile(ProductionTile.Terrain.FERTILE, 0, 0, 0, 1, 3));
		tempList.add(new ProductionTile(ProductionTile.Terrain.FERTILE, 0, 0, 1, 0, 3));
		tempList.add(new ProductionTile(ProductionTile.Terrain.FERTILE, 2, 0, 0, 0, 12));
		tempList.add(new ProductionTile(ProductionTile.Terrain.FERTILE, 0, 1, 0, 0, 3));

		tempList.add(new ProductionTile(ProductionTile.Terrain.SWAMP, 1, 0, 0, 0, 4));
		tempList.add(new ProductionTile(ProductionTile.Terrain.SWAMP, 0, 0, 0, 1, 3));
		tempList.add(new ProductionTile(ProductionTile.Terrain.SWAMP, 0, 2, 0, 0, 4));

		for (int i = 0; i < tempList.size(); i++) {
			ProductionTile temp = tempList.get(i);
			for (int j = 0; j < temp.quantity; j++) {
				game.productionPool.add(temp);
			}
		}
	}
	
	public static void initializePlayerDecks(Game game){
		int numberOfPlayers = 3;
	
		for(int i = 0; i < numberOfPlayers; i ++){
			switch(game.activePlayer.playerRace){
			case NORSE:
				game.activePlayer.permanentDeck.add(new BuildCard
						(null, null, true, "Build up to " + 1 + " building",
								"", 1, 0));
				game.activePlayer.permanentDeck.add(new BuildCard
						(null, null, true, "Build up to " + 1 + " building",
								"", 1, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 4 + " buildings",
								"", 4, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 2 + " buildings",
								"", 2, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 2 + " buildings",
								"", 2, 0));
				game.activePlayer = game.activePlayer.next;
				break;
			case GREEK:
				game.activePlayer.permanentDeck.add(new BuildCard
						(null, null, true, "Build up to " + 1 + " building",
								"", 1, 0));
				game.activePlayer.permanentDeck.add(new BuildCard
						(null, null, true, "Build up to " + 1 + " building",
								"", 1, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 4 + " buildings",
								"", 4, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildCard
						(null, null, true, "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 2 + " buildings",
								"", 2, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 2 + " buildings",
								"", 2, 0));
				game.activePlayer = game.activePlayer.next;
				break;
			case EGYPTIAN:
				game.activePlayer.permanentDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 1 + " building",
								"", 1, 0));
				game.activePlayer.permanentDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 1 + " building",
								"", 1, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 4 + " buildings",
								"", 4, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 3 + " buildings",
								"", 3, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 2 + " buildings",
								"", 2, 0));
				game.activePlayer.randomDeck.add(new BuildingCard
						(null, null, true, "Build", "Build up to " + 2 + " buildings",
								"", 2, 0));
				game.activePlayer = game.activePlayer.next;
				break;
			default:
				break;
			}
		}
	}
	
	public static void initializePlayerTerrain(Game game){
		int numberOfPlayers = 3;
		for(int i = 0; i < numberOfPlayers; i ++){
			switch(game.activePlayer.playerRace){
			case NORSE:
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FOREST);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.SWAMP);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.SWAMP);
				game.activePlayer = game.activePlayer.next;
				
				break;
			case GREEK:
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.MOUNTAINS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FOREST);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FOREST);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.SWAMP);
				game.activePlayer = game.activePlayer.next;
				break;
			case EGYPTIAN:
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.MOUNTAINS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.MOUNTAINS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.MOUNTAINS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.MOUNTAINS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FERTILE);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FOREST);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FOREST);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FOREST);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.FOREST);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.HILLS);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.DESERT);
				game.activePlayer.terrainAvailable.add(
						ProductionTile.Terrain.SWAMP);
				game.activePlayer = game.activePlayer.next;
				break;
			default:
				break;
			}
		}
	}
	
	public static void choosePlayerResources(Game game){
		int numberOfPlayers = 3;
		RandomSelection<ProductionTile> selector = new RandomSelection<ProductionTile>(game.productionPool);
		ArrayList<ProductionTile> options = new ArrayList<ProductionTile>();
		boolean reverseFlag = false;
		
		for(int i = 0; i < numberOfPlayers*6; i++){
			
			options.add(selector.getRandomFromList());
		}
		for(int i = 0; i < 6; i++){
			for(int j = 0; j < numberOfPlayers; j++){
				ArrayList<ProductionTile> playerOptions = new ArrayList<ProductionTile>();
				for(int k = 0; k < options.size(); k++){
					if(game.activePlayer.terrainAvailable.contains((options.get(k)).type)){
						playerOptions.add(options.get(k));
					}
				}
				if(options.size() > 0){
					UserInterface<ProductionTile> ui = new UserInterface<ProductionTile>();
					ui.provideMenuOptions("Select a resource tile", game.activePlayer, playerOptions, "Pass");
					ProductionTile selected = ui.getPlayerSelection(game.activePlayer, playerOptions, true);
					game.activePlayer.production.add(selected);
					options.remove(selected);
					game.activePlayer.terrainAvailable.remove(selected.type);
				}
				if(j < numberOfPlayers - 1){
					if(reverseFlag){
						for(int k = 0; k < numberOfPlayers - 1; k++)
							game.activePlayer = game.activePlayer.next;
					}
					else{
						game.activePlayer = game.activePlayer.next;
					}
				}
			}
			reverseFlag = (reverseFlag)?false:true;
		}
		for(int i = 0; i < options.size(); i++){
			game.productionPool.add(options.get(i));
		}
	}
	

}
