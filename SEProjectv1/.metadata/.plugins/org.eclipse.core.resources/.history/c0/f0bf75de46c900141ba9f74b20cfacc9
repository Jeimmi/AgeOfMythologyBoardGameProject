import java.awt.image.BufferedImage;
import java.util.ArrayList;


public class GatherCard extends Card{
	protected enum GatherType{TERRAIN, RESOURCE, FOOD};
	ArrayList<GatherType> gatherBy;
	
	/**
	 * The constructor for creating a Gather Card with image
	 *  
     * @param front The Card's front image
     * @param back The Card's back image
     * @param permanent True if Card is permanent
     * @param name The Card name
     * @param firstDescription The main Card description
     * @param secondDescription The secondary Card description
     * @param cost The cost to play the Card
	 * @param gatherBy The method of gathering
	 */
	public GatherCard(BufferedImage front, BufferedImage back,
			boolean permanent, String name, String firstDescription,
			String secondDescription, int cost, 
			GatherCard.GatherType gatherBy1, GatherCard.GatherType gatherBy2) {
		super(front, back, permanent, name, firstDescription,
				secondDescription, 0, cost);
		this.gatherBy.add(gatherBy1);
		if(gatherBy2 != null)
			this.gatherBy.add(gatherBy2);
	}
	
	public void gatherByResource(Game game, int resource){
		for(int i = 0; i < game.activePlayer.production.size(); i++){
			if(game.activePlayer.production.get(i).resource[resource] > 0){
				game.activePlayer.wallet[i] += i;
				if(game.activePlayer.production.get(i).hasVillager){
					game.activePlayer.wallet[i] += i;
				}
			}
		}
	}
	
	public void gatherByTerrain(Game game, ProductionTile.Terrain terrainType){
		for(int i = 0; i < game.activePlayer.production.size(); i++){
			if(game.activePlayer.production.get(i).type == terrainType){
				addResources(game.activePlayer.production.get(i).resource, 
						game.activePlayer.wallet);
				if(game.activePlayer.production.get(i).hasVillager){
					for(int j = 0; j < 4; j++){
						if(game.activePlayer.production.get(i).resource[j] > 0)
							game.activePlayer.wallet[j] += i;
					}
				}
			}
		}
	}
	
	public void gatherByFood(Game game){
		gatherByResource(game, 0);
	}
	
	public void execute(Game game){
		int numberOfPlayers = 3;
		int numberOfVillagers = 0;

		for(int i = 0; i < game.activePlayer.city.size(); i++){
			switch(game.activePlayer.city.get(i).type){
				case HOUSE:
					numberOfVillagers++;
					break;
				case MONUMENT:
					game.activePlayer.wallet[3] += 2;
					break;
				case GRANARY:
					game.activePlayer.wallet[1] += 2;
					break;
				case GOLD_MINT:
					game.activePlayer.wallet[2] += 2;
					break;
				case WOOD_WORKSHOP:
					game.activePlayer.wallet[0] += 2;
					break;
				default:
					break;
			}
					
		}
		
		UserInterface<ProductionTile> manageVillagers =
				new UserInterface<ProductionTile>();
		for(int i = 0; i < numberOfVillagers; i++{)
			manageVillagers.provideMenuOptions("Select " + numberOfVillagers +
					" resource tiles to place a villager on: ", game, 
					game.activePlayer.production, null);
			(manageVillagers.getPlayerSelection(game, game.activePlayer.production, 
					false)).hasVillager = true;
		}
		for(int i = 0; i < game.activePlayer.production.size(); i++){
			game.activePlayer.production.get(i).hasVillager = false;
		}
		
		UserInterface<GatherCard.GatherType> handleGatherTypeSelection =
				new UserInterface<GatherCard.GatherType>();
		handleGatherTypeSelection.provideMenuOptions("Select a Gather method: ",
				game, this.gatherBy, "Burn this card instead...");
		GatherCard.GatherType gatherTypeChoice = 
				handleGatherTypeSelection.getPlayerSelection(game, this.gatherBy, true);
		
		if(gatherTypeChoice == GatherCard.GatherType.TERRAIN){
			ArrayList<ProductionTile.Terrain> terrainTypes = 
					new ArrayList<ProductionTile.Terrain>();
			terrainTypes.add(ProductionTile.Terrain.HILLS); 
			terrainTypes.add(ProductionTile.Terrain.MOUNTAINS); 
			terrainTypes.add(ProductionTile.Terrain.FOREST); 
			terrainTypes.add(ProductionTile.Terrain.DESERT); 
			terrainTypes.add(ProductionTile.Terrain.FERTILE); 
			terrainTypes.add(ProductionTile.Terrain.SWAMP);
			
			UserInterface<ProductionTile.Terrain> manageTerrainSelection = 
					new UserInterface<ProductionTile.Terrain>();
			manageTerrainSelection.provideMenuOptions("Pick a terrain type: ", 
					game, terrainTypes, null);
			ProductionTile.Terrain resourceChoice = manageTerrainSelection.getPlayerSelection(
					game, terrainTypes, false);	
			for(int i = 0; i < numberOfPlayers; i++){
				gatherByTerrain(game, resourceChoice);
				game.activePlayer = game.activePlayer.next;
			}
		}
		
		if(gatherTypeChoice == GatherCard.GatherType.RESOURCE){
			ArrayList<String> resources = new ArrayList<String>();
			resources.add("food");
			resources.add("wood");
			resources.add("gold");
			resources.add("favor");
			UserInterface<String> handleResourceSelection = 
					new UserInterface<String>();
			handleResourceSelection.provideMenuOptions("Pick a resource type: ", game, resources, null);
			String resource = handleResourceSelection.getPlayerSelection(
					game, resources, false);
			for(int i = 0; i < numberOfPlayers; i++){
				switch(resource){
				case("food"):
					gatherByResource(game, 0);
					break;
				case("wood"):
					gatherByResource(game, 1);
					break;
				case("gold"):
					gatherByResource(game, 2);
					break;
				case("favor"):
					gatherByResource(game, 3);
					break;
				default:
						break;
				}
				game.activePlayer = game.activePlayer.next;
			}
		}
		
		if(gatherTypeChoice == GatherCard.GatherType.FOOD){
			for(int i = 0; i < numberOfPlayers; i++){
				gatherByFood(game);
				game.activePlayer = game.activePlayer.next;
			}
		}
	}
}
