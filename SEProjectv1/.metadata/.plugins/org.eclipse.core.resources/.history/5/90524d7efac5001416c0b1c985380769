import java.awt.image.BufferedImage;

public abstract class Card {
	protected BufferedImage front;
	protected BufferedImage back;
	protected boolean permanent;
	protected String name;
	protected String firstDescription;
	protected String secondDescription;
	protected int value;
	protected int[] cost;

	public Card(BufferedImage front, BufferedImage back,
			boolean permanent, String name, String firstDescription,
			String secondDescription, int value, int[] cost) {
		this.front = front;
		this.back = back;
		this.permanent = permanent;
		this.name = name;
		this.firstDescription = firstDescription;
		this.secondDescription = secondDescription;
		this.value = value;
		this.cost = cost;
	}
	
	public void addResources(int[] toAdd, int[] addedTo){
		for(int i = 0; ((i < toAdd.length) && (i < addedTo.length)); i++){
			addedTo[i] = addedTo[i] + toAdd[i];
		}
	}
	
	public void subtractResources(int[] toSub, int[] subbedFrom){
		for(int i = 0; ((i < toSub.length) && (i < subbedFrom.length)); i++){
			subbedFrom[i] = subbedFrom[i] - toSub[i];
		}
	}
	public int addBuilding(Game game, Building selection){
		int discountUsed = 0;
		for(int i = 0; i < 4; i ++){
			if(game.activePlayer.wallet[i] < selection.cost[i]){
				int temp = selection.cost[i] - game.activePlayer.wallet[i];
				discountUsed = discountUsed + temp;
				game.activePlayer.wallet[i] = game.activePlayer.wallet[i] - selection.cost[i] + temp;
				game.bank[i] = game.bank[i] + selection.cost[i] - discountUsed;
				
			}
			else{
				game.activePlayer.wallet[i] = game.activePlayer.wallet[i] - selection.cost[i];
				game.bank[i] = game.bank[i] + selection.cost[i];
			}
		}
		game.activePlayer.buildingPool.remove(selection);
		game.activePlayer.city.add(selection);
		return discountUsed;
	}
	
	@Override
	public String toString(){
		return ("" + name + " : " + firstDescription + " : " + secondDescription +
				" : Cost - " + cost[3] + "R" );
	}

	public abstract void execute(Game game);
}
