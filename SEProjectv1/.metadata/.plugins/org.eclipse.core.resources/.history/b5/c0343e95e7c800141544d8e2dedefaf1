/**
 * @author Lyndon Kondratczyk
 * @version 3/9/15
 * 
 * The template for an AoM Build Card attributes
 */
import java.awt.image.BufferedImage;
import java.util.ArrayList;

public class BuildCard extends Card {
	
	/**
     * The constructor for creating a Build Card with image
     * 
     * @param front The Card's front image
     * @param back The Card's back image
     * @param permanent True if Card is permanent
     * @param name The Card name
     * @param firstDescription The main Card description
     * @param secondDescription The secondary Card description
     * @param value The max number of builds
     * @param cost The cost to play the Card
     */
	public BuildCard(BufferedImage front, BufferedImage back,
			boolean permanent, String firstDescription,
			String secondDescription, int value, int cost) {
		super(front, back, permanent, "Build", firstDescription,
				secondDescription, value, cost);
	}
	
	/**
	 * Checks to see if a wallet can cover a cost
	 * 
	 * @param wallet The Player's funds
	 * @param cost An action's resource requirement
	 * @return True if the player can afford the item
	 */
	public boolean canAffordByResource(int[] wallet, int[] cost){
		for(int i = 0; i < 4; i++){
			if(wallet[i] < cost[i]){
				return false;
			}
		}
		return true;
	}
	
	/**
	 * An algorithm that factors in discounts when checking to see if a Player
	 * can afford an item
	 * 
	 * @param wallet The Player's funds
	 * @param cost The cost of an item
	 * @param discount The resource count of a discount
	 * @param index The resource being discounted (starts at zero always)
	 * @return
	 */
	public boolean canAffordWithDiscount(int[] wallet, int[] cost, int discount, int index){
		if(canAffordByResource(wallet, cost)){
			return true;
		}
		else if((discount) > 0 && index == 4){
			return canAffordWithDiscount(wallet, cost, discount - 1, 0);
		}
		else if(discount > 0){
			return canAffordWithDiscount(wallet, cost, discount, index + 1);
		}
		else{
			return false;
		}
		
	}
	
	/**
	 * Create an ArrayList of Buildings that a Player has the option to build
	 * 
	 * @param player The player playing the Build card
	 * @param discount The current discount to be considered
	 * @return The ArrayList of Buildings the Player can afford
	 */
	public ArrayList<Building> populateAffordable(Player player, int discount){
		ArrayList<Building> affordable = new ArrayList<Building>();
		int copyDiscount = 0 + discount;
		boolean houseChecked = false;
		
		for(int i = 0; i < player.city.size(); i++){
			if((player.city.get(i)).type == Building.Type.QUARRY){
				discount = 1;
			}
		}
		for(int i = 0; i < player.buildingPool.size(); i++){
			Building temp = player.buildingPool.get(i);
			int[] copyCost = new int[4];
			if(temp != null){
				for(int j = 0; j < 4; j++){
					copyCost[j] = temp.cost[j];
				}
				if(temp.type == Building.Type.HOUSE){
					if(!(houseChecked)){
						houseChecked = true;
						affordable.add(temp);
					}
				}
				else{
					affordable.add(temp);
				}
				if(!(houseChecked)){
					if(temp.type == Building.Type.HOUSE){
						houseChecked = true;
					}
					if(canAffordWithDiscount(player.wallet, copyCost, copyDiscount, 0)){
						affordable.add(temp);
					}
				}
			}
			
		}
		return affordable;
	}
	
	/**
	 * Handles the purchase of a building, including moving the building,
	 * calculating the funds changed and returning the discount applied
	 * 
	 * @param game The game being altered by the purchase
	 * @param selection The Building being purchased
	 * @param refundOptions A pool of resources available for refund
	 * @return The amount of the discount that was necessary to apply
	 */
	public int buildBuilding(Game game, Building selection, int[] refundOptions){
		int discountUsed = 0;
		for(int i = 0; i < 4; i ++){
			if(game.activePlayer.wallet[i] < selection.cost[i]){
				int temp = selection.cost[i] - game.activePlayer.wallet[i];
				discountUsed = discountUsed + temp;
				game.activePlayer.wallet[i] = 0;
				game.bank[i] = game.bank[i] + selection.cost[i] - discountUsed;
				refundOptions[i] = refundOptions[i] + selection.cost[i] - discountUsed;
			}
			else{
				game.activePlayer.wallet[i] = game.activePlayer.wallet[i] - selection.cost[i];
				game.bank[i] = game.bank[i] + selection.cost[i];
				refundOptions[i] = refundOptions[i] + selection.cost[i];
			}
		}
		addBuilding(game, selection);
		return discountUsed;
	}
	
	
	
	/**
	 * This method executes a sequence of events in the Game that represent
	 * playing a BuildCard
	 * 
	 * @param game The Game being worked on by the Card
	 */
	
	@Override
	public void execute(Game game) {
		if(game.activePlayer.city.size() < 16){
			UserInterface<Building> buildingSelect = new UserInterface<Building>();
			UserInterface<String> refundSelect = new UserInterface<String>(); 
			ArrayList<String> resources = new ArrayList<String>();
			resources.add("food");
			resources.add("wood");
			resources.add("gold");
			resources.add("favor");
			int discount = 0;
			for(int i = 0; i < game.activePlayer.city.size(); i++){
				if((game.activePlayer.city.get(i)).type == Building.Type.QUARRY){
					discount = 1;
				}
			}
			int builds = value;
			
			for(int i = 0; i < builds; i++){
				int[] refundAvailable = {0, 0, 0, 0};
				int discountUsed = 0;
				ArrayList<Building> options = populateAffordable(game.activePlayer, discount);
				buildingSelect.provideMenuOptions("Please select a building to build from the following:", 
						game, options, "Pass remainder of turn");
				Building selection = buildingSelect.getPlayerSelection(game, options, true);
				if(selection == null){
					i = builds;
				}
				else{
					discountUsed = discountUsed + buildBuilding(game, selection, refundAvailable);
				}
				for(int j = 0; j < discount - discountUsed; j++){
					ArrayList<String> refundOptions = new ArrayList<String>();
					for(int k = 0; k < 4; k++){
						if(refundAvailable[k] > 0){
							refundOptions.add(resources.get(k));
						}
					}
					if(refundOptions.size() > 0){
						refundSelect.provideMenuOptions("Select a refund: ", game,
								refundOptions, null);
						String refund = refundSelect.getPlayerSelection(
								game, refundOptions, false);
						switch(refund){
						case("food"):
							System.out.println();
							game.activePlayer.wallet[0] += 1;
							refundAvailable[0] -= 1;
							break;
						case("wood"):
							game.activePlayer.wallet[1] += 1;
							refundAvailable[1] -= 1;
							break;
						case("gold"):
							game.activePlayer.wallet[2] += 1;
							refundAvailable[2] -= 1;
							break;
						case("favor"):
							game.activePlayer.wallet[3] += 1;
							refundAvailable[3] -= 1;
							break;
						default:
								break;
						}
					}
				}
			}
		}
		// TODO Auto-generated method stub
	}
}