import java.util.ArrayList;
import java.util.Scanner;

import Player.Race;

public class UserInterface <T>{
	
	public void provideMenuOptions(String prompt, Player player, ArrayList<T> options, String passOption){
		if(player.human){
			System.out.println(player.name + " : " + prompt);
			for(int i = 0; i < options.size(); i++){
				System.out.println("(" + i + ")" + options.get(i).toString());
				if(i == (options.size() - 1)){
					System.out.println("(" + (i + 1) + ") " + passOption);
				}
			}
		}
	}
	
	public T getPlayerSelection(Player player, ArrayList<T> options, boolean passOption){
		int passAvailable = 0;
		if(player.human = true){
			Scanner input = new Scanner(System.in);
			int selection = -1;
			if(passOption){
				passAvailable ++;
			}
	
			while((selection < 0) || (selection >= options.size() + passAvailable)){
				if(selection != -1){
					System.out.println("Invalid selection, please try again.");
				}
				selection = input.nextInt();
			}
			if(selection == options.size()){
				return null;
			}
			return options.get(selection);
		}
		else{
			RandomSelection<T> optionsList = new RandomSelection<T>(options);
			T selection = optionsList.getRandomFromList();
			return selection;
		}
	}
	
	public void displayList(String title, ArrayList<T> genericList){
		System.out.print(title + " : ");
		for(int i = 0; i < genericList.size(); i++){
			System.out.print(genericList.get(i) + " , ");
		}
	}
	

		
	public void displayGamestate(String title, Game game){
		
		Player playerPointer;
		playerPointer = game.activePlayer;
		UserInterface<ProductionTile.Terrain> terrainAvailable = 
				new UserInterface<ProductionTile.Terrain>();
		UserInterface<Card> hand = new UserInterface<Card>();
		UserInterface<ProductionTile> productionArea = new UserInterface<ProductionTile>();
		UserInterface<Building> cityArea = new UserInterface<Building>();
		
		game.displayFunds("Bank: ", game.bank);
		
		for(int i = 0; i < 3; i++){
			switch(i){
			case 0:
				System.out.println("Current Player - " + playerPointer.name);
				break;
			case 1:
				System.out.println("Next Player - " + playerPointer.name);
				break;
			default:
				System.out.println("Player - " + playerPointer.name);
				break;
			}
			
			System.out.println(playerPointer.playerRace);
			terrainAvailable.displayList("Available Terrain: ", playerPointer.terrainAvailable);
			hand.displayList("Hand: ", playerPointer.hand);
			productionArea.displayList("Prodcution Area: ", playerPointer.production);
			cityArea.displayList("City Area: ", playerPointer.city);
			game.displayFunds("Wallet: ", playerPointer.wallet);
			
			playerPointer = playerPointer.next;
		}
		System.out.println(playerPointer.playerRace);
		terrainAvailable.displayList("Available Terrain: ", playerPointer.terrainAvailable);
		hand.displayList("Available", playerPointer.hand);
		cityArea.displayList("City Area: ", playerPointer.city);
		game.displayFunds("Bank: ", game.bank);
		
		//protected int[] bank;
		//protected String name;
		//protected Race playerRace;
		//protected ArrayList<ProductionTile.Terrain> terrainAvailable;
		//private ArrayList<Card> hand;
		//protected ArrayList<ProductionTile> production;
		//protected ArrayList<Building> city;
		protected int[] wallet;
		protected boolean human;
		//bank
		//active player hand
		//active player resources
		//active player terrain available
		//active player production
		//active player city
		//opp player name
		//opp player race
		//opp player back of hand x2
		//opp player resources x2
		//opp player terrain available x2
		//opp player production x2
		//opp player city x2
		protected ArrayList<ProductionTile> productionPool;
		
	}
}
